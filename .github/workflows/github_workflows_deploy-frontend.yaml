name: Deploy Frontend (Dev)

on:
  push:
    branches:
      - main

permissions:
  contents: write
  id-token: write

jobs:
  deploy-frontend:
    runs-on: [self-hosted, Windows, X64, frontend-dev]

    steps:
      ### 1. Git Safe Directory 설정
      - name: Add Safe Directory
        shell: powershell
        run: |
          git config --global --add safe.directory D:/actions_work/netcore/source/frontend

      ### 2. 현재 소스 코드 백업
      - name: Backup current source
        shell: powershell
        run: |
          $baseDir = 'D:\actions_work\netcore'
          $sourceDir = "$baseDir\source\frontend"
          $backupBaseDir = "$baseDir\backup\source\frontend"

          # 월별 백업 디렉터리 생성
          $currentMonthDir = Join-Path -Path $backupBaseDir -ChildPath (Get-Date -Format 'yyyyMM')
          if (!(Test-Path -Path $currentMonthDir)) {
            New-Item -ItemType Directory -Path $currentMonthDir -Force
          }

          # ZIP 파일 생성
          $currentDateTime = "$(Get-Date -Format 'yyyyMMdd-HHmmss').zip"
          $backupFile = Join-Path -Path $currentMonthDir -ChildPath $currentDateTime
          Compress-Archive -Path "$sourceDir\*" -DestinationPath $backupFile -Force
          Write-Output "✅ Current source files backed up to: $backupFile"

      ### 3. 현재 배포 파일 백업
      - name: Backup current deploy files
        shell: powershell
        run: |
          $baseDir = 'D:\actions_work\netcore'
          $deployDir = "$baseDir\deploy\frontend"
          $backupBaseDir = "$baseDir\backup\deploy\frontend"

          # 월별 백업 디렉터리 생성
          $currentMonthDir = Join-Path -Path $backupBaseDir -ChildPath (Get-Date -Format 'yyyyMM')
          if (!(Test-Path -Path $currentMonthDir)) {
            New-Item -ItemType Directory -Path $currentMonthDir -Force
          }

          # ZIP 파일 생성
          $currentDateTime = "$(Get-Date -Format 'yyyyMMdd-HHmmss').zip"
          $backupFile = Join-Path -Path $currentMonthDir -ChildPath $currentDateTime
          Compress-Archive -Path "$deployDir\*" -DestinationPath $backupFile -Force
          Write-Output "✅ Current deploy files backed up to: $backupFile"

      ### 4. 최신 소스 코드 가져오기
      - name: Checkout Source Code
        shell: powershell
        run: |
          $repoUrl = "https://${{ secrets.GITHUB_ACTOR }}:${{ secrets.KTNETCOREACTION }}@github.com/KTNetCoreSolution/frontend.git"
          $branch = 'main'
          $sourceDir = 'D:\actions_work\netcore\source\frontend'

          # 기존 소스 삭제
          if (Test-Path -Path $sourceDir) {
              Remove-Item -Recurse -Force -Path $sourceDir
              Write-Output "✅ Removed existing source directory: $sourceDir"
          }

          # 리포지토리 클론
          git clone --branch $branch $repoUrl $sourceDir
          Write-Output "✅ Source code checked out to: $sourceDir"

      ### 5. Node.js 설정 확인
      - name: Verify Node.js Environment
        shell: powershell
        run: |
          Write-Output "Checking Node.js and npm versions..."
          node -v
          npm -v
          Write-Output "✅ Node.js environment verified."

      ### 6. 프론트엔드 의존성 설치
      - name: Install dependencies
        shell: powershell
        run: |
          $sourceDir = "D:/actions_work/netcore/source/frontend"
          cd $sourceDir
          npm ci
          Write-Output "✅ Dependencies successfully installed."

      ### 7. .env.production 파일 적용
      - name: Apply .env.production file
        shell: powershell
        run: |
          $sourceDir = "D:\actions_work\netcore\source\frontend"
          $envFile = "$sourceDir\.env.production"
          $destinationEnv = "$sourceDir\.env"

          # 설정 파일 복사
          if (Test-Path -Path $envFile) {
            if (Test-Path -Path $destinationEnv) {
              Remove-Item -Path $destinationEnv -Force -ErrorAction SilentlyContinue
            }
            Copy-Item -Path $envFile -Destination $destinationEnv -Force
            Write-Output "✅ .env.production applied as .env file."
          } else {
            Write-Output "⚠️ .env.production file not found. Default environment configuration will be used."

      ### 8. 프론트엔드 빌드
      - name: Build frontend
        shell: powershell
        run: |
          $sourceDir = "D:/actions_work/netcore/source/frontend"
          cd $sourceDir
          npm run build -- --mode production
          Write-Output "✅ Frontend build completed successfully."

      ### 9. 빌드 결과물 배포 디렉터리로 복사
      - name: Deploy build files
        shell: powershell
        run: |
          $sourceDir = "D:\actions_work\netcore\source\frontend\dist"
          $deployDir = "D:\actions_work\netcore\deploy\frontend"

          # 기존 배포 디렉터리 삭제
          if (Test-Path -Path $deployDir) {
            Remove-Item -Recurse -Force -Path $deployDir
            Write-Output "✅ Existing deploy directory removed: $deployDir"
          }

          # 새 배포 디렉터리 복사
          Copy-Item -Path $sourceDir -Destination $deployDir -Recurse -Force
          Write-Output "✅ Build files deployed to: $deployDir"
name: Deploy Frontend (Dev)

on:
  push:
    branches:
      - main

env:
  BASE_DIR: D:/actions_work/netcore
  SOURCE_DIR: D:/actions_work/netcore/source/frontend
  BACKUP_DIR: D:/actions_work/netcore/backup
  DEPLOY_DIR: D:/actions_work/netcore/deploy/frontend  # Nginx 정적 파일 루트 디렉터리 경로
  REPO_URL: https://${{ secrets.GITHUB_ACTOR }}:${{ secrets.KTNETCOREACTION }}@github.com/KTNetCoreSolution/frontend.git

  # Nginx 서비스 관련 환경 변수
  SERVICE_NAME: Nginx
  SERVICE_DISPLAY_NAME: Nginx Web Server
  SERVICE_DESCRIPTION: Nginx Web Server for KTNetCoreSolution
  NGINX_PATH: D:/tool/nginx/nginx.exe

permissions:
  contents: write
  id-token: write

jobs:
  deploy-frontend:
    # 실행 환경 설정
    runs-on: [self-hosted, Windows, X64, frontend-dev]

    steps:
      ### 1. Node.js 버전 확인
      - name: Verify Node.js Installation
        shell: powershell
        run: |
          Write-Output "🔍 Verifying installed Node.js and npm versions..."
          node -v
          npm -v

          # Node.js 버전 확인
          $currentVersion = node -v
          if (-not ($currentVersion -match "^v22\.")) {
              Write-Error "❌ Node.js v22.x is required. Current version: $currentVersion"
              exit 1
          }

      ### 2. Nginx를 Windows 서비스로 등록 (필요 시)
      - name: Register Nginx as Windows Service
        shell: powershell
        run: |
          Write-Output "🔄 Checking if the Nginx service is already registered..."

          # 서비스 등록 여부 확인
          $serviceName = "${{ env.SERVICE_NAME }}"
          $serviceDisplayName = "${{ env.SERVICE_DISPLAY_NAME }}"
          $serviceDescription = "${{ env.SERVICE_DESCRIPTION }}"
          $nginxPath = "${{ env.NGINX_PATH }}"

          if (-not (Get-Service -Name $serviceName -ErrorAction SilentlyContinue)) {
              Write-Output "⚙️ Registering Nginx as a Windows service..."
              New-Service -Name $serviceName -DisplayName $serviceDisplayName -Description $serviceDescription -BinaryPathName $nginxPath -StartupType Automatic
              Write-Output "✅ Nginx is successfully registered as a Windows service."
          } else {
              Write-Output "✅ Nginx is already registered as a Windows service."
          }

      ### 3. Git Safe Directory 설정
      - name: Add Safe Directory
        shell: powershell
        run: |
          git config --global --add safe.directory ${{ env.SOURCE_DIR }}
          Write-Output "✅ Git safe directory added: ${{ env.SOURCE_DIR }}"

      ### 4. 현재 소스 코드 백업
      - name: Backup Current Source
        shell: powershell
        run: |
          # 백업 관련 함수 정의
          function Backup-Files {
              param([string]$SourcePath, [string]$BackupPath)

              # 백업 대상 디렉터리 (월별 디렉터리) 생성
              $currentMonthDir = Join-Path -Path $BackupPath -ChildPath (Get-Date -Format 'yyyyMM')
              if (-not (Test-Path -Path $currentMonthDir)) {
                  Write-Output "📂 Creating backup directory: $currentMonthDir"
                  New-Item -ItemType Directory -Path $currentMonthDir -Force
              }

              # 압축 파일 이름 설정
              $currentTime = "$(Get-Date -Format 'yyyyMMdd-HHmmss').zip"
              $backupFilePath = Join-Path -Path $currentMonthDir -ChildPath $currentTime

              # node_modules 제외한 파일 리스트 생성
              Write-Output "📋 Generating file list excluding 'node_modules'..."
              $filesToBackup = Get-ChildItem -Path $SourcePath -Recurse -Force |
                               Where-Object { -not ($_.FullName -like '*\node_modules\*') -and -not ($_.PSIsContainer -and $_.Name -eq 'node_modules') }

              # 압축 생성 (node_modules 제외한 파일만 포함)
              Write-Output "🔄 Compressing source files (excluding node_modules) to $backupFilePath..."
              $tempDir = Join-Path -Path $env:TEMP -ChildPath "BackupTemp" # 임시 디렉터리 경로 생성
              if (Test-Path $tempDir) { 
                  Remove-Item -Path $tempDir -Recurse -Force -ErrorAction SilentlyContinue 
              }
              New-Item -Path $tempDir -ItemType Directory -Force

              foreach ($file in $filesToBackup) {
                  $destinationPath = Join-Path -Path $tempDir -ChildPath ($file.FullName.Substring($SourcePath.Length).TrimStart('\'))
                  $destinationDir = Split-Path -Path $destinationPath -Parent
                  if (-not (Test-Path -Path $destinationDir)) { 
                      New-Item -ItemType Directory -Path $destinationDir -Force 
                  }
                  Copy-Item -Path $file.FullName -Destination $destinationPath -Recurse -Force
              }

              Compress-Archive -Path "$tempDir\*" -DestinationPath $backupFilePath -Force
              Remove-Item -Path $tempDir -Recurse -Force -ErrorAction SilentlyContinue

              Write-Output "✅ Backup completed at $backupFilePath"
          }

          # 함수 호출 (환경 변수 사용)
          Backup-Files -SourcePath "${{ env.SOURCE_DIR }}" -BackupPath "${{ env.BACKUP_DIR }}\source\frontend"

      ### 5. 최신 소스 코드 가져오기
      - name: Checkout Source Code
        shell: powershell
        run: |
          $branch = 'main'

          # 소스 디렉터리 삭제
          if (Test-Path -Path "${{ env.SOURCE_DIR }}") {
              Write-Output "📂 Removing existing source directory: ${{ env.SOURCE_DIR }}"
              Remove-Item -Path "${{ env.SOURCE_DIR }}" -Recurse -Force -ErrorAction SilentlyContinue
              Write-Output "✅ Existing source directory removed: ${{ env.SOURCE_DIR }}"
          }

          # 최신 코드 클론
          Write-Output "🔄 Cloning repository from: ${{ env.REPO_URL }} (branch: $branch)"
          git clone --branch $branch "${{ env.REPO_URL }}" "${{ env.SOURCE_DIR }}"
          Write-Output "✅ Source code cloned successfully to: ${{ env.SOURCE_DIR }}"

      ### 6. .env 파일 복사
      - name: Copy .env file
        shell: powershell
        run: |
          $envSourcePath = 'D:\actions_work\netcore\env\frontend.env.production'
          $envDestinationPath = 'D:\actions_work\netcore\source\frontend\.env.production'
        
          # .env 파일이 존재하는지 확인하고 복사
          if (Test-Path -Path $envSourcePath) {
              Copy-Item -Path $envSourcePath -Destination $envDestinationPath -Force
              Write-Output "✅ .env file copied to: $envDestinationPath"
          } else {
              Write-Output "❌ .env source file not found: $envSourcePath"
              exit 1  # 실패 처리
          }

      ### 7. 의존성 설치 및 빌드
      - name: Install and Build Frontend
        shell: powershell
        run: |
          cd "${{ env.SOURCE_DIR }}"

          # 의존성 설치
          Write-Output "📦 Installing dependencies using npm install..."
          npm install

          # 빌드 실행
          Write-Output "⚙️ Starting Vite production build..."
          npm run build

          # 빌드 성공 여부 확인
          if ($?) {
              Write-Output "✅ Frontend build completed successfully."
          } else {
              Write-Error "❌ Frontend build failed."
              exit 1
          }

      ### 8. 빌드 결과 배포 (Nginx 디렉터리로 복사)
      - name: Deploy Build Files
        shell: powershell
        run: |
          $deployDir = "${{ env.DEPLOY_DIR }}"
          $buildOutput = "${{ env.SOURCE_DIR }}\dist"

          Write-Output "📂 Deploying build files to Nginx directory..."

          # 기존 배포 파일 삭제
          if (Test-Path -Path $deployDir) {
              Write-Output "⚠️ Clearing existing files in: $deployDir"
              Remove-Item -Path $deployDir -Recurse -Force
          }

          # 새 빌드 파일 복사
          Copy-Item -Path "$buildOutput\*" -Destination $deployDir -Recurse -Force
          Write-Output "✅ Build files successfully deployed to: $deployDir"

      ### 9. Nginx 서비스 재시작
      - name: Restart Nginx Service
        shell: powershell
        run: |
          $serviceName = "${{ env.SERVICE_NAME }}"

          Write-Output "🔄 Restarting Nginx service..."

          # Nginx 서비스 재시작
          if (Get-Service -Name $serviceName -ErrorAction SilentlyContinue) {
              Restart-Service -Name $serviceName -Force
              Write-Output "✅ Nginx service restarted successfully."
          } else {
              Write-Error "❌ Nginx service not found. Please ensure it is properly registered."
              exit 1
          }
name: Deploy Frontend (Dev)

on:
  push:
    branches:
      - main

env:
  BASE_DIR: D:/actions_work/netcore
  SOURCE_DIR: ${{ env.BASE_DIR }}/source/frontend
  BACKUP_DIR: ${{ env.BASE_DIR }}/backup
  DEPLOY_DIR: D:/tool/nginx/html  # Nginx 정적 파일 루트 디렉터리 경로
  REPO_URL: https://${{ secrets.GITHUB_ACTOR }}:${{ secrets.KTNETCOREACTION }}@github.com/KTNetCoreSolution/frontend.git

  # Nginx 서비스 관련 환경 변수
  SERVICE_NAME: Nginx
  SERVICE_DISPLAY_NAME: Nginx Web Server
  SERVICE_DESCRIPTION: Nginx Web Server for KTNetCoreSolution
  NGINX_PATH: D:/tool/nginx/nginx.exe

permissions:
  contents: write
  id-token: write

jobs:
  deploy-frontend:
    # 실행 환경 설정
    runs-on: [self-hosted, Windows, X64, frontend-dev]

    steps:
      ### 1. Node.js 버전 확인
      - name: Verify Node.js Installation
        shell: powershell
        run: |
          Write-Output "🔍 Verifying installed Node.js and npm versions..."
          node -v
          npm -v

          # Node.js 버전 확인
          $currentVersion = node -v
          if (-not ($currentVersion -match "^v22\.")) {
              Write-Error "❌ Node.js v22.x is required. Current version: $currentVersion"
              exit 1
          }

      ### 2. Nginx를 Windows 서비스로 등록 (필요 시)
      - name: Register Nginx as Windows Service
        shell: powershell
        run: |
          Write-Output "🔄 Checking if the Nginx service is already registered..."

          # 서비스 등록 여부 확인
          $serviceName = "${{ env.SERVICE_NAME }}"
          $serviceDisplayName = "${{ env.SERVICE_DISPLAY_NAME }}"
          $serviceDescription = "${{ env.SERVICE_DESCRIPTION }}"
          $nginxPath = "${{ env.NGINX_PATH }}"

          if (-not (Get-Service -Name $serviceName -ErrorAction SilentlyContinue)) {
              Write-Output "⚙️ Registering Nginx as a Windows service..."
              New-Service -Name $serviceName -DisplayName $serviceDisplayName -Description $serviceDescription -BinaryPathName $nginxPath -StartupType Automatic
              Write-Output "✅ Nginx is successfully registered as a Windows service."
          } else {
              Write-Output "✅ Nginx is already registered as a Windows service."
          }

      ### 3. Git Safe Directory 설정
      - name: Add Safe Directory
        shell: powershell
        run: |
          git config --global --add safe.directory ${{ env.SOURCE_DIR }}
          Write-Output "✅ Git safe directory added: ${{ env.SOURCE_DIR }}"

      ### 4. 현재 소스 코드 백업
      - name: Backup Current Source
        shell: powershell
        run: |
          function Backup-Files {
              param([string]$SourcePath, [string]$BackupPath)
              $currentMonthDir = Join-Path -Path $BackupPath -ChildPath (Get-Date -Format 'yyyyMM')
              if (!(Test-Path -Path $currentMonthDir)) {
                  New-Item -ItemType Directory -Path $currentMonthDir -Force
              }
              $currentTime = "$(Get-Date -Format 'yyyyMMdd-HHmmss').zip"
              Compress-Archive -Path "$SourcePath\*" -DestinationPath (Join-Path -Path $currentMonthDir -ChildPath $currentTime) -Force
              Write-Output "✅ Backup completed at $currentMonthDir."
          }
          Backup-Files -SourcePath "${{ env.SOURCE_DIR }}" -BackupPath "${{ env.BACKUP_DIR }}/source/frontend"

      ### 5. 최신 소스 코드 가져오기
      - name: Checkout Source Code
        shell: powershell
        run: |
          $branch = 'main'

          # 기존 소스 제거
          if (Test-Path -Path "${{ env.SOURCE_DIR }}") {
              Remove-Item -Path "${{ env.SOURCE_DIR }}" -Recurse -Force -ErrorAction SilentlyContinue
          }

          # 최신 코드를 클론
          git clone --branch $branch "${{ env.REPO_URL }}" "${{ env.SOURCE_DIR }}"
          Write-Output "✅ Source code cloned to: ${{ env.SOURCE_DIR }}"
          
      ### 6. .env 파일 복사
      - name: Copy .env file
        shell: powershell
        run: |
          $envSourcePath = 'D:\actions_work\netcore\env\frontend.env.production'
          $envDestinationPath = 'D:\actions_work\netcore\source\backend\.env.production'

          # .env 파일이 존재하는지 확인하고 복사
          if (Test-Path -Path $envSourcePath) {
              Copy-Item -Path $envSourcePath -Destination $envDestinationPath -Force
              Write-Output "✅ .env file copied to: $envDestinationPath"
          } else {
              Write-Output "❌ .env source file not found: $envSourcePath"
              exit 1  # 실패 처리
          }

      ### 7. 의존성 설치 및 빌드
      - name: Install and Build Frontend
        shell: powershell
        run: |
          cd "${{ env.SOURCE_DIR }}"
          npm ci
          npm run build

          if ($?) {
              Write-Output "✅ Frontend build completed successfully."
          } else {
              Write-Error "❌ Frontend build failed."
              exit 1
          }

      ### 8. 빌드 결과 배포 (Nginx 디렉터리로 복사)
      - name: Deploy Build Files
        shell: powershell
        run: |
          $deployDir = "${{ env.DEPLOY_DIR }}"
          $buildOutput = "${{ env.SOURCE_DIR }}\dist"

          # 기존 배포 파일 삭제
          if (Test-Path -Path $deployDir) {
              Remove-Item -Path $deployDir -Recurse -Force
          }

          # 새 빌드 파일 복사
          Copy-Item -Path "$buildOutput\*" -Destination $deployDir -Recurse -Force
          Write-Output "✅ Build files deployed to: $deployDir"

      ### 9. Nginx 서비스 재시작
      - name: Restart Nginx Service
        shell: powershell
        run: |
          $serviceName = "${{ env.SERVICE_NAME }}"

          # Nginx 서비스 재시작
          if (Get-Service -Name $serviceName -ErrorAction SilentlyContinue) {
              Write-Output "🔄 Restarting Nginx service..."
              Restart-Service -Name $serviceName -Force
              Write-Output "✅ Nginx service restarted successfully."
          } else {
              Write-Error "❌ Nginx service not found. Please ensure it is properly registered."
              exit 1
          }
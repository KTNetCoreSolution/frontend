name: Deploy Frontend (Dev)

on:
  push:
    branches:
      - main

jobs:
  deploy-frontend:
    runs-on: [self-hosted, Windows, X64, dev-runner]

    steps:
      # 1. 현재 소스 코드 백업
      - name: Backup current source
        run: |
          $baseDir = 'D:\actions_work\netcore'
          $sourceDir = "$baseDir\source\frontend"
          $backupBaseDir = "$baseDir\backup\source\frontend"
          $currentMonthDir = "$backupBaseDir\$(Get-Date -Format 'yyyyMM')"
          $currentDateTime = "$(Get-Date -Format 'yyyyMMddHHmmss').zip"

          if (!(Test-Path -Path $currentMonthDir)) {
            New-Item -ItemType Directory -Path $currentMonthDir -Force
          }

          $backupFile = Join-Path -Path $currentMonthDir -ChildPath $currentDateTime
          Compress-Archive -Path "$sourceDir\*" -DestinationPath $backupFile -Force
          Write-Host "Source files have been backed up to: $backupFile"

      # 2. 현재 배포 파일 백업
      - name: Backup current deploy files
        run: |
          $baseDir = 'D:\actions_work\netcore'
          $deployDir = "$baseDir\deploy\frontend"
          $backupBaseDir = "$baseDir\backup\deploy\frontend"
          $currentMonthDir = "$backupBaseDir\$(Get-Date -Format 'yyyyMM')"
          $currentDateTime = "$(Get-Date -Format 'yyyyMMddHHmmss').zip"

          if (!(Test-Path -Path $currentMonthDir)) {
            New-Item -ItemType Directory -Path $currentMonthDir -Force
          }

          $backupFile = Join-Path -Path $currentMonthDir -ChildPath $currentDateTime
          Compress-Archive -Path "$deployDir\*" -DestinationPath $backupFile -Force
          Write-Host "Deploy files have been backed up to: $backupFile"

      # 3. 최신 소스 코드 Checkout (GitHub 레포지토리에서 소스 가져오기)
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: KTNetCoreSolution/frontend
          ref: main
          token: ${{ secrets.NETCORE_DEV_FRONTEND_APP_TOKEN }}
          path: source/frontend

      # 4. Node.js 설치
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '19.1'

      # 5. FE 의존성 설치
      - name: Install dependencies
        run: npm ci
        working-directory: D:\actions_work\netcore\source\frontend

      # 6. .env.production 파일 적용
      - name: Apply .env.production file
        run: |
          $envFile = "D:\actions_work\netcore\source\frontend\.env.production"
          $destinationPath = "D:\actions_work\netcore\source\frontend\.env"

          if (Test-Path -Path $envFile) {
            Remove-Item -Path $destinationPath -Force -ErrorAction SilentlyContinue
            Copy-Item -Path $envFile -Destination $destinationPath -Force
            Write-Host ".env.production has been successfully applied as .env file."
          } else {
            Write-Host "Warning: .env.production file not found. Default configuration will be used."

      # 7. FE 빌드
      - name: Build frontend
        run: npm run build -- --mode production
        working-directory: D:\actions_work\netcore\source\frontend

      # 8. 빌드 결과 배포 디렉토리로 복사
      - name: Copy to deploy
        run: |
          $sourceDir = 'D:\actions_work\netcore\source\frontend'
          $deployDir = 'D:\actions_work\netcore\deploy\frontend'
          $buildDir = "$sourceDir\dist"

          if (!(Test-Path -Path $deployDir)) {
            New-Item -ItemType Directory -Path $deployDir -Force
          }

          Copy-Item -Path "$buildDir\*" -Destination "$deployDir" -Recurse -Force
          Write-Host "Frontend build has been copied to: $deployDir"

      # 9. Nginx 다시 로드
      - name: Reload Nginx
        run: D:\tool\nginx\nginx.exe -s reload
name: Deploy Frontend (Dev)

on:
  push:
    branches:
      - main

permissions:
  contents: write
  id-token: write

jobs:
  deploy-frontend:
    runs-on: [self-hosted, Windows, X64, dev]

    steps:
      # 1. 현재 소스 코드 백업
      - name: Backup current source
        shell: pwsh
        run: |
          $baseDir = 'D:\actions_work\netcore'
          $sourceDir = "$baseDir\source\frontend"
          $backupBaseDir = "$baseDir\backup\source\frontend"
          $currentMonthDir = Join-Path -Path $backupBaseDir -ChildPath (Get-Date -Format 'yyyyMM')
          $currentDateTime = "$(Get-Date -Format 'yyyyMMdd-HHmmss').zip"

          if (!(Test-Path -Path $currentMonthDir)) {
            New-Item -ItemType Directory -Path $currentMonthDir -Force
          }

          $backupFile = Join-Path -Path $currentMonthDir -ChildPath $currentDateTime
          Compress-Archive -Path "$sourceDir\*" -DestinationPath $backupFile -Force
          Write-Host "✅ Source files have been backed up to: $backupFile"

      # 2. 현재 배포 파일 백업
      - name: Backup current deploy files
        shell: pwsh
        run: |
          $baseDir = 'D:\actions_work\netcore'
          $deployDir = "$baseDir\deploy\frontend"
          $backupBaseDir = "$baseDir\backup\deploy\frontend"
          $currentMonthDir = Join-Path -Path $backupBaseDir -ChildPath (Get-Date -Format 'yyyyMM')
          $currentDateTime = "$(Get-Date -Format 'yyyyMMdd-HHmmss').zip"

          if (!(Test-Path -Path $currentMonthDir)) {
            New-Item -ItemType Directory -Path $currentMonthDir -Force
          }

          $backupFile = Join-Path -Path $currentMonthDir -ChildPath $currentDateTime
          Compress-Archive -Path "$deployDir\*" -DestinationPath $backupFile -Force
          Write-Host "✅ Deploy files have been backed up to: $backupFile"

      # 3. 최신 소스 코드 가져오기 (Git 명령어 사용)
      - name: Checkout code
        shell: pwsh
        run: |
          $repoUrl = 'https://:${{ secrets.GITHUB_TOKEN }}@github.com//.git'  # GitHub 리포지토리 URL (인증 포함)
          $branch = 'main'
          $sourceDir = 'D:\actions_work\netcore\source\frontend'

          if (!(Test-Path -Path $sourceDir)) {
            New-Item -ItemType Directory -Path $sourceDir -Force
          }

          cd $sourceDir
          git init
          git remote add origin $repoUrl
          git fetch origin $branch --force
          git reset --hard origin/$branch
          Write-Host "✅ Source code checked out to: $sourceDir"

      # 4. Node.js 설정 확인
      - name: Verify Node.js Environment
        shell: pwsh
        run: |
          Write-Host "Checking Node.js and npm versions..."
          node -v
          npm -v
          Write-Host "✅ Node.js environment verified."

      # 5. 프론트엔드 의존성 설치
      - name: Install dependencies
        shell: pwsh
        run: |
          cd D:/actions_work/netcore/source/frontend
          npm ci
        working-directory: D:/actions_work/netcore/source/frontend

      # 6. .env.production 파일 적용
      - name: Apply .env.production file
        shell: pwsh
        run: |
          $sourceDir = "D:\actions_work\netcore\source\frontend"
          $envFile = "$sourceDir\.env.production"
          $destinationEnv = "$sourceDir\.env"

          if (Test-Path -Path $envFile) {
            if (Test-Path -Path $destinationEnv) {
              Remove-Item -Path $destinationEnv -Force -ErrorAction SilentlyContinue
            }
            Copy-Item -Path $envFile -Destination $destinationEnv -Force
            Write-Host "✅ .env.production has been successfully applied as .env file."
          } else {
            Write-Host "⚠️ .env.production file not found. Default configuration will be used."

      # 7. 프론트엔드 빌드
      - name: Build frontend
        shell: pwsh
        run: |
          cd D:/actions_work/netcore/source/frontend
          npm run build -- --mode production
        working-directory: D:/actions_work/netcore/source/frontend

      # 8. 빌드 결과 배포 디렉터리로 복사
      - name: Deploy to frontend folder
        shell: pwsh
        run: |
          $sourceDir = 'D:\actions_work\netcore\source\frontend'
          $buildDir = "$sourceDir\dist"
          $deployDir = 'D:\actions_work\netcore\deploy\frontend'

          if (!(Test-Path -Path $deployDir)) {
            New-Item -ItemType Directory -Path $deployDir -Force
          }

          # 빌드된 결과물을 배포 디렉터리로 복사
          Copy-Item -Path "$buildDir\*" -Destination "$deployDir\" -Recurse -Force
          Write-Host "✅ Build files have been deployed to: $deployDir"